Method Overloading


Σε ένα πρόγραμμα, υπάρχει περίπτωση να χρειαστεί να εκτελέσουμε την ίδια διαδικασία
με ελαφρώς διαφορετικά δεδομένα. Αυτό συνήθως σημαίνει ότι θα χρειαστεί να έχουμε
διαφορετικές συναρτήσεις/μεθόδους για κάθε διαφορετική παράμετρο που δίνουμε. Για
παράδειγμα, ας υποθέσουμε ότι ο χρήστης καλεί την μέθοδο turn_wheel() με
παράμετρο ένα int αντί για float. Σε μια γλώσσα όπως η C θα έπρεπε να έχουμε δύο
συναρτήσεις/μεθόδους, μια για κάθε διαφορετική παράμετρο και μάλιστα με
διαφορετικό όνομα:



void turn_wheel_int(int relative_angle)
{
this.steering_angle += (float) relative_angle;
if (this.steering_angle <= -720.0)
this.steering_angle = -720.0;
if (this.steering_angle >= 720.0)
this.steering_angle = 720.0;
}
void turn_wheel_float(float relative_angle)
{
steering_angle += relative_angle;
if (steering_angle <= -720.0)
steering_angle = -720.0;
if (steering_angle >= 720.0)
teering_angle = 720.0;
}


Φυσικά, το συγκεκριμένο παράδειγμα είναι αρκετά απλό και δεν αποτελεί πρόβλημα.
Μπορούμε μάλιστα να τροποποιήσουμε την turn_wheel_int() ως εξής:


void turn_wheel_int(int relative_angle)
{
turn_wheel_float((float) relative_angle);
}


Στην πραγματικότητα, αν έχουμε κάποιο πιο περίπλοκο πρόγραμμα με μερικές δεκάδες
παραλλαγές μεθόδων και κάποιες χιλιάδες γραμμές κώδικα, η παραπάνω τεχνική
δυσκολεύει το debugging, προκαλεί διπλασιασμό του κώδικα και δυσχεραίνει τη
συντήρηση του προγράμματος. Στην περίπτωση αυτή επιβάλλεται η χρήση μιας Object-
Oriented γλώσας όπως η Java και η C++ που παρέχουν δυνατότητες Method
Overloading. Η τεχνική του method overloading, επιτρέπει τον ορισμό διάφορων
παραλλαγών μιας μεθόδου αναλόγως τις ζητούμενες παραμέτρους που δέχεται αυτή. Το
παραπάνω παράδειγμα, θα μετασχηματιστεί στην εξής μορφή:


void turn_wheel(float relative_angle)
{
steering_angle += relative_angle;
if (steering_angle <= -720.0)
steering_angle = -720.0;
if (steering_angle >= 720.0)
steering_angle = 720.0;
}
void turn_wheel(int relative_angle)
{
turn_wheel((float) relative_angle);
}

Το όνομα της μεθόδου παραμένει turn_wheel() και μπορούμε να έχουμε όσες
παραλλαγές θέλουμε όσον αφορά το είδος και το πλήθος των παραμέτρων που δέχεται.
Παρ' όλ' αυτά, ο τύπος δεδομένων που επιστρέφει η μέθοδος (ή void αν δεν επιστρέφει
κάτι) θα πρέπει να είναι ο ίδιος σε κάθε παραλλαγή της μεθόδου.